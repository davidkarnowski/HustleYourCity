name: Automated Data Export and Summary

on:
  schedule:
    # Los Angeles times converted to UTC (LA is UTCâˆ’7 during Daylight Saving Time)
    - cron: "10 14 * * *"   # 7:10 AM LA (14:01 UTC)
    - cron: "10 18 * * *"   # 11:10 AM LA (18:01 UTC)
    - cron: "10 22 * * *"   # 3:10 PM LA (22:01 UTC)
    - cron: "10 2 * * *"    # 7:10 PM LA (02:01 UTC next day)
    - cron: "10 6 * * *"    # 11:10 PM LA (06:01 UTC next day)
    - cron: "10 10 * * *"   # 3:10 AM LA (10:01 UTC)
  workflow_dispatch:       # allow manual runs as well

jobs:
  export_and_parse:
    runs-on: ubuntu-latest
    permissions:
      contents: write       # required to push changes back
      actions: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run exporter script
        run: |
          echo "Starting full data export..."
          python full_exporter.py

      - name: Run summary parser
        run: |
          echo "Running summary parser..."
          python type_status_response_summary.py

      - name: Duplicate latest summary file as current
        run: |
          echo "Copying latest summary file to summary_results_current.json..."
          latest_file=$(ls -t data/summary_stats_*.json | head -n 1)
          if [ -f "$latest_file" ]; then
            cp "$latest_file" data/summary_results_current.json
            echo "Copied $latest_file to summary_results_current.json"
          else
            echo "No summary_stats_*.json file found to copy."
          fi

      - name: Generate dashboards
        run: |
          echo "Generating dashboard HTML files..."
          python generate_dashboard.py

      - name: Pull latest changes to avoid non-fast-forward errors
        run: |
          echo "Pulling latest changes from main branch..."
          git config pull.rebase false
          git pull origin main || echo "Proceeding despite pull conflicts (likely none for data/)"

      - name: Commit and push updated data
        id: commit_push
        run: |
          echo "Checking for new or modified data files..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/ data/dashboard/
          if git diff --cached --quiet; then
            echo "No new data changes detected. Skipping commit."
            echo "updated=false" >> $GITHUB_OUTPUT
          else
            git commit -m "Automated dataset, summary, and dashboard update [skip ci]"
            git push origin main
            echo "Changes pushed successfully."
            echo "updated=true" >> $GITHUB_OUTPUT
          fi

      - name: Trigger Make.com webhook
        if: steps.commit_push.outputs.updated == 'true'
        env:
          MAKE_WEBHOOK_URL: ${{ secrets.MAKE_WEBHOOK_URL }}
          MAKE_WEBHOOK_KEY: ${{ secrets.MAKE_WEBHOOK_KEY }}
        run: |
          # The key must be sent using the 'x-make-apikey' HTTP header.
          # The Authorization header used previously was incorrect for this setup.
          echo "Triggering Make.com scenario webhook (data updated)..."
          
          # Construct a JSON payload with relevant GitHub context information
          PAYLOAD='{
            "event": "data_pipeline_update",
            "repository": "${{ github.repository }}",
            "ref": "${{ github.ref_name }}",
            "sha": "${{ github.sha }}",
            "trigger_type": "${{ github.event_name }}",
            "run_id": "${{ github.run_id }}"
          }'

          curl -s -o /dev/null -w "%{http_code}" -X POST "$MAKE_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "x-make-apikey: $MAKE_WEBHOOK_KEY" \
            -d "$PAYLOAD" | { 
              read http_code 
              if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 202 ]; then
                echo "Webhook triggered successfully. HTTP Status: $http_code"
              else
                echo "Webhook trigger failed. HTTP Status: $http_code"
                exit 1 # Fail the step if the webhook doesn't respond with success
              fi
            }
